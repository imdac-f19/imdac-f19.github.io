(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{240:function(t,e,s){"use strict";s.r(e);var i=s(0),a=Object(i.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("Youtube",{attrs:{id:"ltzQbZrWLds",citation:'This video was created by <a href="https://www.youtube.com/channel/UCUFbBYzSUafxMpUbTmroGhg">CodeSchool</a>'}}),t._v(" "),s("div",{staticClass:"watch"},[s("p",[s("a",{attrs:{href:"https://app.pluralsight.com/library/courses/code-school-git-real/table-of-contents",target:"_blank",rel:"noopener noreferrer"}},[t._v('Watch "Git Real" on PluralSight'),s("OutboundLink")],1)])]),t._v(" "),t._m(1),t._v(" "),s("p",[t._v("A version control systems are tools that manage changes to text files over. These tools keep track of every change and who made it. So, if developer needed revert to older version of a file, it can be done with minimal disruption to the workflow or other team members. Version control systems also helps with collaboration, preventing developers from overriding each others work, and provide tools to merge changes together.")]),t._v(" "),s("p",[t._v("The benefits of the version control system includes:")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),s("p",[t._v("Git is the most widely use version control system today. It was developed by Linus Torvalds, the creator of Linux, in 2005. Git uses a distributed architecture, which allows for the entire repository to exist on each individual computer, instead of the centralized architecture found in version control systems like CVS and Subversion.")]),t._v(" "),s("p",[t._v("Git has many advantages over its predecessors. From the beginning, Git was designed with performance, security and flexibility in mind, and today has become the de facto standard for tools of its kind.")]),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("Git has very precise workflow that can be a little confusing at first for new developers, and it works like this.")]),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("After moving files to the stage area, they can be committed. Committing a file is like taking a snapshot of the file at that precise moment, so that it can be quickly retrieved in the future even if further changes have been made. You can think of committing like saving. The more often you commit, the more tracking of the file progress Git will store.")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("Traditionally, Git is controlled using the Command Line Interface (CLI), but many GUI tools, both free and paid, are available. For this course, we will be use a combination of command line, and the GUI build in to Visual Studio Code.")]),t._v(" "),s("p",[t._v("This page demonstrates working with Git using the command line interface. On the next page, the same commands will be shown using Visual Studio Code.")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),s("p",[t._v("It is possible to add multiple files to the staging area by using different options.")]),t._v(" "),t._m(18),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22)],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"git-basics"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-basics","aria-hidden":"true"}},[this._v("#")]),this._v(" Git Basics")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"version-control-systems"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#version-control-systems","aria-hidden":"true"}},[this._v("#")]),this._v(" Version Control Systems")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ol",[e("li",[this._v("The ability to keep long-term history of every file.")]),this._v(" "),e("li",[this._v("The ability to brach and merge a project.")]),this._v(" "),e("li",[this._v("The ability to trace each change made to a project.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git","aria-hidden":"true"}},[this._v("#")]),this._v(" Git")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"git-workflow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-workflow","aria-hidden":"true"}},[this._v("#")]),this._v(" Git Workflow")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("When a new file is created in a directory that been initialize with a Git repository, that file will be marked by Git as "),e("strong",[this._v("untracked")]),this._v(". This simply means there is a new file that Git does not have in it history. To start versioning the file is a two step process.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("The first step is to add the file to the "),e("strong",[this._v("staging")]),this._v(" area. The staging area is where we put file that we are ready for Git to "),e("strong",[this._v("commit")]),this._v(". The staging area is important of the Git workflow, because it allows us to commit some file, but not others, because only files that in the staging area will be commit.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("If a change is made to an existing file that is being tracked by Git, it will be marked as "),e("strong",[this._v("modified")]),this._v(". Modified files do require the same process of adding the file to the staging area and committing the changes.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"working-with-git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#working-with-git","aria-hidden":"true"}},[this._v("#")]),this._v(" Working with Git")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"initializing-a-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#initializing-a-repository","aria-hidden":"true"}},[this._v("#")]),this._v(" Initializing a repository")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("When we are ready start our project, we navigate to the project folder using the command line, and then type "),e("code",[this._v("git init")]),this._v(" to initialize an empty Git repository on your computer.")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Move to project folder")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("cd")]),t._v(" my_project\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Initialize repository")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"checking-the-status-of-the-repository"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#checking-the-status-of-the-repository","aria-hidden":"true"}},[this._v("#")]),this._v(" Checking the status of the repository")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("To get a list of current status of the repository, which will include untracked, modified, and staged files, we would use the "),e("code",[this._v("git status")]),this._v(" command from within the project folder.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# Check the status of the repository")]),this._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" status\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"adding-to-staging-area"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#adding-to-staging-area","aria-hidden":"true"}},[this._v("#")]),this._v(" Adding to staging area")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("To add a specific file to the staging area, we would use the "),e("code",[this._v("git add")]),this._v(" command from within the project folder follow by the path to the file.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[this._v("# Add index.html to the staging area")]),this._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[this._v("add")]),this._v(" index.html\n")])])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files that end in .html")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" *.html\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files in the css directory")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" css/*\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Add all files everywhere")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --all \n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"committing-the-changes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#committing-the-changes","aria-hidden":"true"}},[this._v("#")]),this._v(" Committing the changes")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("Once a file has been added to the staging area, it can be committed using the "),e("code",[this._v("git commit")]),this._v(" command. Now, each time a commit is made, it is important to add a short message that describes what the commit or changes are doing. We add a message by using the "),e("code",[this._v("-m")]),this._v(" option follow by the message in quotes.")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"warning custom-block"},[e("p",{staticClass:"custom-block-title"},[this._v("NOTE")]),this._v(" "),e("p",[this._v("Best practice states that messages should be set in the  present tense, and describes what the commit is doing, not what the developer did.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[this._v("git")]),this._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[this._v('"Adds an index.html to my project"')]),this._v("\n")])])])}],!1,null,null,null);e.default=a.exports}}]);